// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // pnpm doesn't generate the client in the right place, so we need to override the output
  // https://github.com/prisma/prisma/issues/6603#issuecomment-1054227614
  output = "../node_modules/.prisma/client" // <-- generate in your package node_modules, not the root
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum PaymentIntentStatus {
  pending
  processing
  succeeded
  canceled
}

enum LogType {
  status_created
  status_processing
  status_succeeded
  status_canceled
  modified
  note
}

model PaymentIntent {
  id                 String              @id @default(uuid())
  address            String              @unique // Addresses are unique, so we can identify the payment intent by the address
  amount             Decimal             @db.Decimal(20, 8)
  status             PaymentIntentStatus @default(pending)
  confirmations      Int                 @default(1) // Number of blocks confirmed required for the transaction to be considered confirmed.
  tolerance          Decimal             @default(0.02) @db.Decimal(5, 4) // Percentage of the amount that can be lost due to exchange rate fluctuations
  currency           String              @default("BTC") @db.VarChar(3) // 3 letter currency code
  canceledAt         DateTime?
  cancellationReason String?
  description        String?
  metadata           Json?
  transactions       Transaction[]
  webhookAttempts    WebhookAttempt[]
  logs               Log[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

// Logs are used to track the status of the payment intent and make a timeline of events
model Log {
  id              String        @id @default(uuid())
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])
  paymentIntentId String
  status          LogType
  message         String?
  createdAt       DateTime      @default(now())
}

model Transaction {
  id              String        @id
  amount          Decimal       @db.Decimal(20, 8)
  originalAmount  Decimal?      @db.Decimal(20, 2) /// Converted to the currency of the payment intent at the time of the transaction @map("amountReceived")
  confirmations   Int
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])
  paymentIntentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model WebhookAttempt {
  id              String        @id @default(uuid())
  url             String
  event           String
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])
  paymentIntentId String
  status          Int
  body            Json
  response        Json?
  createdAt       DateTime      @default(now())
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id       String  @id @unique @default(cuid())
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  roles    Role[]
  session  Session[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}
