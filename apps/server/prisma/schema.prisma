// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String  @id @unique @default(cuid())
  username String  @unique
  name     String?

  password Password?
  roles    Role[]
  session  Session[]
  account  Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String    @id @default(cuid())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// When it's safe to delete this verification
  expiresAt DateTime?

  createdAt DateTime @default(now())

  @@unique([target, type])
}

/// Stores the session of a user so that they can stay logged in
model Session {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime

  createdAt DateTime @default(now())
}

/// Accounts are the top level entity in the system. They are used to group users, apis, webhooks, and payment intents.
model Account {
  id             String          @id @default(cuid())
  /// The name of the account
  name           String
  /// The owner of the account
  owner          User            @relation(fields: [ownerId], references: [id])
  /// The owner of the account
  ownerId        String
  /// All apis that belong to this account
  apis           Api[]
  /// All payment intents that belong to this account
  paymentIntents PaymentIntent[]
  /// All webhooks that belong to this account
  webhooks       Webhook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Statuses are used to track the status of the payment intent
enum PaymentIntentStatus {
  pending
  processing
  succeeded
  canceled
}

/// Mode stores which in which state the data reprensents so that we can have different data for production, test, and development and switch between them easily
enum Mode {
  prod
  test
  dev
}

/// Payment intents are used to track payments. They are made up of one or more transactions.
model PaymentIntent {
  id                 String              @id @default(uuid())
  /// The mode of the webhook (e.g. prod, test, dev)
  mode               Mode
  /// Addresses are unique, so we can identify the payment intent by the address
  address            String              @unique
  /// The amount of the payment intent in the smallest unit of the currency (e.g. satoshis for BTC)
  amount             BigInt
  /// The status of the payment intent (e.g. pending, processing, succeeded, canceled)
  status             PaymentIntentStatus @default(pending)
  /// The number of confirmations required for the transaction to be considered succeeded.
  confirmations      Int                 @default(1)
  /// Percentage of the amount that can be lost due to exchange rate fluctuations
  tolerance          Decimal             @default(0.02) @db.Decimal(5, 4)
  /// 3 letter currency code
  currency           String              @default("BTC") @db.VarChar(3)
  /// When this payment intent was canceled
  canceledAt         DateTime?
  /// The reason this payment intent was canceled
  cancellationReason String?
  /// The description of the payment intent (e.g. "Payment for invoice #1234")
  description        String?
  /// The metadata of the payment intent (e.g. {invoiceId: 1234})
  metadata           Json?
  /// The account that this payment intent belongs to
  accountId          String
  /// The account that this payment intent belongs to
  account            Account             @relation(fields: [accountId], references: [id])
  /// The transactions that make up this payment intent
  transactions       Transaction[]
  /// All webhooks that have been called for this payment intent
  webhookAttempts    WebhookAttempt[]
  /// All logs for this payment intent
  logs               Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Logs are used to track important information of the payment intent and make a timeline of events.
enum LogType {
  status_created
  status_processing
  status_succeeded
  status_canceled
  modified
  note
}

/// Logs are used to track the status of the payment intent and make a timeline of events.
model Log {
  id              String        @id @default(uuid())
  /// The payment intent that this log belongs to
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])
  /// The payment intent that this log belongs to
  paymentIntentId String
  /// The type of log (e.g. status_created, status_processing, status_succeeded, status_canceled, modified, note)
  status          LogType
  /// The message of the log in case it's a note
  message         String?

  createdAt DateTime @default(now())
}

/// Transactions are used to track the status of a single/multiple transactions that a payment intent is made up of.
model Transaction {
  id              String        @id
  /// The amount of the transaction in the satoshis
  amount          BigInt
  /// The amount of the transaction in the smallest unit of the currency of the payment intent at the time of the transaction. The value may change due to exchange rate fluctuations by the time the user create it and transaction is confirmed.
  originalAmount  BigInt?
  /// Number of confirmations of the transaction
  confirmations   Int
  /// The payment intent that this transaction belongs to
  paymentIntentId String
  // The payment intent that this transaction belongs to
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Webhook attempts are used to track the status of webhook calls
model WebhookAttempt {
  id              String        @id @default(uuid())
  /// The url of the webhook that was called
  url             String
  /// The event that was triggered the webhook
  event           String
  /// The status code of the response
  status          Int
  /// The body of the request
  body            Json
  /// The body of the response
  response        Json?
  /// The webhook that this attempt belongs to
  webhook         Webhook?      @relation(fields: [webhookId], references: [id], onDelete: SetNull)
  /// The webhook that this attempt belongs to
  webhookId       String?
  /// The payment intent that this webhook attempt belongs to
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])
  /// The payment intent that this webhook attempt belongs to
  paymentIntentId String

  createdAt DateTime @default(now())
}

/// APIs store important information that are used to authenticate requests to the API
model Api {
  id        String     @id @default(cuid())
  /// The mode of the api (e.g. prod, test)
  mode      AccessMode
  /// The name of the api
  name      String
  /// The secret key of the api
  key       String     @unique
  /// The account that this api belongs to
  account   Account    @relation(fields: [accountId], references: [id])
  /// The account that this api belongs to
  accountId String

  createdAt DateTime @default(now())
}

/// Webhooks are used to notify external services of events that happen in the system (e.g. payment intent status changes)
model Webhook {
  id          String           @id @default(uuid())
  /// The mode of the webhook (e.g. prod, test)
  mode        AccessMode
  /// The url of the webhook that will be called
  url         String
  /// The secret of the webhook
  secret      String
  /// The description of the webhook
  description String?
  /// The version of the webhook
  version     String           @default("2023-07-28")
  /// The account that this webhook belongs to
  accountId   String
  /// The account that this webhook belongs to
  account     Account          @relation(fields: [accountId], references: [id])
  /// All attempts that were made to call this webhook
  attempts    WebhookAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accountId, mode, url])
}

/// Mode in which the access to the API and webhooks is made
enum AccessMode {
  prod
  test
}
